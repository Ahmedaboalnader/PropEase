version: 3.7

services:

  # DataBase Service
  database:
    image: adham00/sql-server:latest
    container_name: database
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      placement:
        constraints: 
          - 'node.role == worker'
      restart_policy:
        condition: on-failure
        delay: 10s 
        max_attempts: 3     
    env_file:
      - ./Database/.env
    volumes:
      - type: volume
        source: database-data
        target: /var/opt/mssql/
    networks:
      - internal-network
   
  # BackEnd Service
  backend:
    image: adham00/dotnet-server:latest
    container_name: backend
    deploy:
      replicas: 4
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
      placement:
        constraints: 
          - 'node.role == worker'
      restart_policy:
        condition: on-failure
        delay: 10s 
        max_attempts: 3
    networks:
      - internal-network
    
  # FrontEnd Service
  frontend:
    image: adham00/web-server:latest
    container_name: frontend
    deploy:
      mode: global # every node will have one container
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s 
        max_attempts: 3
    networks:
      - internal-network
    ports:
      - target: 80  
        published: 80

  # Visualizer to Visual nodes and running containers
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8001:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      update_config:
        failure_action: rollback
      placement:
        constraints:
          - 'node.role == manager'        


# Volume for Data of DataBase
volumes: 
  database-data:

# Networks
networks:
  internal-network:
    driver: overlay
      driver_opts:
        encrypted: 'yes'
    
